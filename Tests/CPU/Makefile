# The following makefile has been taken and adapted from the Google Test
# framework to meet the requirements for this project...

# A sample Makefile for building Google Test and using it in user
# tests.  Please tweak it to suit your environment and project.  You
# may want to move it to your project's root directory.
#
# SYNOPSIS:
#
#   make [all]  - makes everything.
#   make TARGET - makes the given target.
#   make clean  - removes all files generated by make.

# Please tweak the following variable definitions as needed by your
# project, except GTEST_HEADERS, which you can use in your own targets
# but shouldn't modify.


# -------------- PARAMETERS FOR USERS TO EDIT --------------------

# A c++ capable compiler
CC = g++
# The c++ capable mpi compiler. In systems with multiple versions of MPI, the particular version may need to be specified with eg
# mpicxx.mpich
MPI_CC = mpic++
# The script used to launch mpi programs. In systems with multiple versions of MPI, the particular version may need to be 
# specified with eg mpirun.mpich
MPIEXEC = mpirun

# The hdf5 compiler. This must be the version of the hdf5 
# compiler available on your system that links the correct mpi libraries. Should 
# be one of h5pcc, h5pcc.openmpi or h5pcc.mpich. 
HD5_CC = h5pcc

# Points to the root of Google Test, relative to where this file is.
# Remember to tweak this if you move this file.
GTEST_DIR = ../../../googletest/googletest

# -------------- END PARAMETERS USERS ARE LIKELY TO NEED TO EDIT --------------------


# Compiler used by hdf5 for c++. Shouldn't need to change this
export HDF5_CXX := $(MPI_CC)
export HDF5_CLINKER := $(MPI_CC)

# these should no longer be needed but leaving them in just in case
MPI_FLAGS =
HDF5_FLAGS =

# Where to find user code.
MODULE_DIR = ./../../Project/CPU/Src
TEST_DIR = ./Src
INC_BASE_DIR = ./../../Project/CPU/Include
INC_DIRS = ./../../Project/CPU/Include/BoundaryConditions ./../../Project/CPU/Include/DataIO ./../../Project/CPU/Include/Flux ./../../Project/CPU/Include/InitialData ./../../Project/CPU/Include/Physics ./../../Project/CPU/Include/Simulation ./../../Project/CPU/Include/TimeIntegrators
INC_PARAMS = $(foreach d, $(INC_DIRS), -I$d)

# Flags passed to the preprocessor.
# Set Google Test's header directory as a system directory, such that
# the compiler doesn't generate warnings in Google Test headers.
CPPFLAGS = -isystem $(GTEST_DIR)/include -Wall -std=c++11

# Flags passed to the C++ compiler.
# c++11 is required for the vector looping srmhd
# First four required to get the c++11 standard to compile with NVIDIA, dont ask me why,
# found the solution on https://github.com/NVIDIA/nccl/issues/29
CXXFLAGS = -std=c++11 -g

# All tests produced by this Makefile.  Remember to add new tests you
# created to the list.
TESTS = test_simulation 		\
				test_srmhd 				 	\
				test_initFunc 			\
				test_cminpack 			\
				test_boundaryConds	\
				test_twoFluidEMHD 	\
				test_srrmhd 				\
				test_rk2 						\
				test_rkSplit 				\
				test_REGIME 				\
				test_imex 					\
				test_fvs						\
				test_weno						\
				test_RKPlus

PARALLEL_TESTS = test_parallel_rk2     \
				 				 test_parallel_rkSplit

HDF5_TESTS = test_hdf5_rk2

HDF5_PARALLEL_TESTS = test_hdf5_parallel_rk2

# All Google Test headers.  Usually you shouldn't change this
# definition.
GTEST_HEADERS = $(GTEST_DIR)/include/gtest/*.h \
                $(GTEST_DIR)/include/gtest/internal/*.h

# Rootfinder executables
RTFIND = buildRootfinder

# House-keeping build targets.

test_serial : $(RTFIND) $(TESTS)
	# Run all serial tests
	$(foreach exe, $(TESTS), ./$(exe);)

test_parallel : $(RTFIND) $(PARALLEL_TESTS) 
	# Run all parallel tests
	$(foreach exe, $(PARALLEL_TESTS), mpirun -np 4 ./$(exe);)

	# Run tests that compare outputs of TestData/Serial and TestData/Parallel
	py.test -v Src/compareParallelAndSerial.py


test_hdf5: test_serial test_parallel $(HDF5_TESTS) $(HDF5_PARALLEL_TESTS)
	# Convert text outputs from serial tests to HDF5 for comparison with HDF5 tests
	python ../../Scripts/dirText2hdf.py ../TestData/Serial/ ../TestData/SerialTextToHDF5
	
	# Convert text outputs from parallel tests to HDF5 for comparison with HDF5 tests
	python ../../Scripts/dirText2hdf.py ../TestData/CPU/ ../TestData/CPUTextToHDF5

	# Run all serial HDF5 tests
	$(foreach exe, $(HDF5_TESTS), ./$(exe);)

	# Run all parallel HDF5 tests
	$(foreach exe, $(HDF5_PARALLEL_TESTS), mpirun -np 4 ./$(exe);)

        # Compare parallel tests with HDF5 tests
	py.test -v Src/compareParallelHDF5.py

	# Compare serial tests with HDF5 tests
	py.test -v Src/compareSerialHDF5.py

test : test_hdf5 test_serial test_parallel

all : $(RTFIND) $(TESTS)

buildRootfinder:
	cd $(RTFIND_DIR) && $(MAKE)	objects

# TODO -- add back in test_fvs, test_imex when working
# TODO -- add in hdf5 tests
compare : test_rk2 test_rkSplit test_parallel_rk2 test_parallel_rkSplit test_hdf5_rk2 test_hdf5_parallel_rk2
	./test_rk2
	./test_rkSplit
	$(foreach exe, $(PARALLEL_TESTS), mpirun -np 4 ./$(exe);)
	py.test -v Src/compareParallelAndSerial.py

clean :
	rm -f $(TESTS) $(PARALLEL_TESTS) $(HDF5_TESTS) $(HDF5_PARALLEL_TESTS) gtest.a gtest_main.a *.o

# Builds gtest.a and gtest_main.a.

# Usually you shouldn't tweak such internal variables, indicated by a
# trailing _.
GTEST_SRCS_ = $(GTEST_DIR)/src/*.cc $(GTEST_DIR)/src/*.h $(GTEST_HEADERS)

# Rootfinder directory
RTFIND_DIR = ./../../Project/CPU/CminpackLibrary

# Cminpack include directory
RTFIND_INC_DIR =  $(RTFIND_DIR)/Include

# Cminpack source directory
RTFIND_SRC_DIR =   $(RTFIND_DIR)/Src

# Rootfinder objects
RTFIND_OBJS = $(RTFIND_SRC_DIR)/dogleg.o \
							$(RTFIND_SRC_DIR)/dpmpar.o \
							$(RTFIND_SRC_DIR)/enorm.o \
							$(RTFIND_SRC_DIR)/fdjac1.o \
							$(RTFIND_SRC_DIR)/hybrd.o \
							$(RTFIND_SRC_DIR)/hybrd1.o \
							$(RTFIND_SRC_DIR)/qform.o \
							$(RTFIND_SRC_DIR)/qrfac.o \
							$(RTFIND_SRC_DIR)/r1mpyq.o \
							$(RTFIND_SRC_DIR)/r1updt.o


# For simplicity and to avoid depending on Google Test's
# implementation details, the dependencies specified below are
# conservative and not optimized.  This is fine as Google Test
# compiles fast and for ordinary users its source rarely changes.


gtest-all.o : $(GTEST_SRCS_)
	@$(CXX) $(CPPFLAGS) -I$(GTEST_DIR) $(CXXFLAGS) -c \
            $(GTEST_DIR)/src/gtest-all.cc

gtest_main.o : $(GTEST_SRCS_)
	@$(CXX) $(CPPFLAGS) -I$(GTEST_DIR) $(CXXFLAGS) -c \
            $(GTEST_DIR)/src/gtest_main.cc

gtest.a : gtest-all.o
	@$(AR) $(ARFLAGS) $@ $^

gtest_main.a : gtest-all.o gtest_main.o
	@$(AR) $(ARFLAGS) $@ $^

	####################################################
	# Buliding tests for each element of the programme #
	####################################################


# simData
simData.o : $(MODULE_DIR)/Simulation/simData.cc $(INC_BASE_DIR)/Simulation/simData.h
	$(CC) $(CPPFLAGS) $(CXXFLAGS) -c $(MODULE_DIR)/Simulation/simData.cc $(INC_PARAMS)

# Weno reconstruction
wenoUpwinds.o : $(MODULE_DIR)/Flux/wenoUpwinds.cc $(INC_BASE_DIR)/Flux/wenoUpwinds.h
	$(CC)	$<	-c	$(CXXFLAGS) $(INC_PARAMS)

weno.o : $(MODULE_DIR)/Flux/weno.cc $(INC_BASE_DIR)/Flux/weno.h $(INC_BASE_DIR)/Flux/wenoUpwinds.h
	$(CC) $(CPPFLAGS) $(CXXFLAGS) -c $(MODULE_DIR)/Flux/weno.cc $(INC_PARAMS)

test_weno.o : $(TEST_DIR)/test_weno.cc $(INC_BASE_DIR)/Flux/weno.h \
	                    $(INC_BASE_DIR)/Flux/wenoUpwinds.h
	$(CC) $(CPPFLAGS) $(CXXFLAGS) -c $(TEST_DIR)/test_weno.cc $(INC_PARAMS)  -I$(RTFIND_INC_DIR)

test_weno : test_weno.o weno.o wenoUpwinds.o simData.o serialEnv.o gtest_main.a
	$(CC)	$(CPPFLAGS) $(CXXFLAGS) -pthread $^ -o $@

# Runge-Kutta integrators
RK2.o	:	$(MODULE_DIR)/TimeIntegrators/RK2.cc $(INC_BASE_DIR)/TimeIntegrators/RK2.h
	$(CC) $(CPPFLAGS) $(CXXFLAGS) -c $(MODULE_DIR)/TimeIntegrators/RK2.cc $(INC_PARAMS)

test_rk2.o : $(TEST_DIR)/test_rk2.cc $(INC_BASE_DIR)/TimeIntegrators/RK2.h \
	                    $(INC_BASE_DIR)/Physics/twoFluidEMHD.h $(INC_BASE_DIR)/Simulation/simulation.h $(INC_BASE_DIR)/Simulation/simData.h $(GTEST_HEADERS)
	$(CC) $(CPPFLAGS) $(CXXFLAGS) -c $(TEST_DIR)/test_rk2.cc $(INC_PARAMS)  -I$(RTFIND_INC_DIR)

test_rk2 : test_rk2.o wenoUpwinds.o srmhd.o srrmhd.o fluxVectorSplitting.o boundaryConds.o simData.o RK2.o initFunc.o simulation.o weno.o serialEnv.o serialSaveData.o $(RTFIND_OBJS) gtest_main.a
	$(CC)	$(CPPFLAGS) $(CXXFLAGS) -pthread $^ -o $@

# Explicit RK split integrator
rkSplit.o : $(MODULE_DIR)/TimeIntegrators/rkSplit.cc $(INC_BASE_DIR)/TimeIntegrators/rkSplit.h $(INC_BASE_DIR)/TimeIntegrators/RK2.h
	@$(CC) $(CPPFLAGS) $(CXXFLAGS) -c $(MODULE_DIR)/TimeIntegrators/rkSplit.cc $(INC_PARAMS)

test_rkSplit.o : $(TEST_DIR)/test_rkSplit.cc $(INC_BASE_DIR)/TimeIntegrators/rkSplit.h \
	                    $(INC_BASE_DIR)/Physics/twoFluidEMHD.h $(INC_BASE_DIR)/Simulation/simulation.h $(INC_BASE_DIR)/Simulation/simData.h $(GTEST_HEADERS)
	$(CC) $(CPPFLAGS) $(CXXFLAGS) -c $(TEST_DIR)/test_rkSplit.cc $(INC_PARAMS)  -I$(RTFIND_INC_DIR)

test_rkSplit : test_rkSplit.o wenoUpwinds.o srmhd.o srrmhd.o fluxVectorSplitting.o boundaryConds.o simData.o rkSplit.o RK2.o initFunc.o simulation.o weno.o serialEnv.o serialSaveData.o $(RTFIND_OBJS) gtest_main.a
	$(CC)	$(CPPFLAGS) $(CXXFLAGS) -pthread $^ -o $@

# RKPlus
RKPlus.o	:	$(MODULE_DIR)/TimeIntegrators/RKPlus.cc $(INC_BASE_DIR)/TimeIntegrators/RKPlus.h
	$(CC) $(CPPFLAGS) $(CXXFLAGS) -c $(MODULE_DIR)/TimeIntegrators/RKPlus.cc $(INC_PARAMS)

test_RKPlus.o : $(TEST_DIR)/test_RKPlus.cc $(INC_BASE_DIR)/TimeIntegrators/RKPlus.h \
	                    $(INC_BASE_DIR)/Physics/twoFluidEMHD.h $(INC_BASE_DIR)/Simulation/simulation.h $(INC_BASE_DIR)/Simulation/simData.h $(GTEST_HEADERS)
	$(CC) $(CPPFLAGS) $(CXXFLAGS) -c $(TEST_DIR)/test_RKPlus.cc $(INC_PARAMS)  -I$(RTFIND_INC_DIR)

test_RKPlus : test_RKPlus.o REGIME.o wenoUpwinds.o srmhd.o srrmhd.o fluxVectorSplitting.o boundaryConds.o simData.o RKPlus.o initFunc.o simulation.o weno.o serialEnv.o serialSaveData.o $(RTFIND_OBJS) gtest_main.a
	$(CC)	$(CPPFLAGS) $(CXXFLAGS) -pthread $^ -o $@


# Flux vector splitting method
fluxVectorSplitting.o : $(MODULE_DIR)/Flux/fluxVectorSplitting.cc $(INC_BASE_DIR)/Flux/fluxVectorSplitting.h $(INC_BASE_DIR)/Flux/weno.h
	@$(CC) $(CPPFLAGS) $(CXXFLAGS) -c $(MODULE_DIR)/Flux/fluxVectorSplitting.cc $(INC_PARAMS)

test_fvs.o : $(TEST_DIR)/test_fvs.cc \
	                    $(INC_BASE_DIR)/Physics/srmhd.h $(INC_BASE_DIR)/Simulation/simulation.h $(INC_BASE_DIR)/Simulation/simData.h $(GTEST_HEADERS)
	@$(CC) $(CPPFLAGS) $(CXXFLAGS) -c $(TEST_DIR)/test_fvs.cc $(INC_PARAMS)  -I$(RTFIND_INC_DIR)

test_fvs : wenoUpwinds.o srmhd.o test_fvs.o fluxVectorSplitting.o boundaryConds.o simData.o RK2.o rkSplit.o initFunc.o simulation.o weno.o serialEnv.o serialSaveData.o $(RTFIND_OBJS) gtest_main.a
	@$(CC)	$(CPPFLAGS) $(CXXFLAGS) -pthread $^ -o $@

# Save data (required for simulation.evolve)
serialSaveData.o : $(MODULE_DIR)/DataIO/serialSaveData.cc $(INC_BASE_DIR)/DataIO/serialSaveData.h
	@$(CC) $(CPPFLAGS) $(CXXFLAGS) -c $(MODULE_DIR)/DataIO/serialSaveData.cc $(INC_PARAMS)

serialSaveDataHDF5.o : $(MODULE_DIR)/DataIO/serialSaveDataHDF5.cc $(INC_BASE_DIR)/DataIO/serialSaveDataHDF5.h
	@$(HD5_CC) $(HDF5_FLAGS) $(MPI_FLAGS) $(CPPFLAGS) $(CXXFLAGS) -c $(MODULE_DIR)/DataIO/serialSaveDataHDF5.cc $(INC_PARAMS)

parallelSaveData.o : $(MODULE_DIR)/DataIO/parallelSaveData.cc $(INC_BASE_DIR)/DataIO/parallelSaveData.h
	@$(MPI_CC) $(MPI_FLAGS) $(CPPFLAGS) $(CXXFLAGS) -c $(MODULE_DIR)/DataIO/parallelSaveData.cc $(INC_PARAMS)

parallelSaveDataHDF5.o : $(MODULE_DIR)/DataIO/parallelSaveDataHDF5.cc $(INC_BASE_DIR)/DataIO/parallelSaveDataHDF5.h
	@$(HD5_CC) $(HDF5_FLAGS) $(MPI_FLAGS) $(CPPFLAGS) $(CXXFLAGS) -c $(MODULE_DIR)/DataIO/parallelSaveDataHDF5.cc $(INC_PARAMS)

# Platform env
serialEnv.o : $(MODULE_DIR)/Simulation/serialEnv.cc $(INC_BASE_DIR)/Simulation/serialEnv.h
	$(CC) $(CPPFLAGS) $(CXXFLAGS) -c $(MODULE_DIR)/Simulation/serialEnv.cc $(INC_PARAMS)

# Simulation
simulation.o : $(MODULE_DIR)/Simulation/simulation.cc $(INC_BASE_DIR)/Simulation/simulation.h
	@$(CC) $(CPPFLAGS) $(CXXFLAGS) -c $(MODULE_DIR)/Simulation/simulation.cc $(INC_PARAMS)

test_simulation.o : $(TEST_DIR)/test_simulation.cc \
                     $(INC_BASE_DIR)/Simulation/simulation.h $(GTEST_HEADERS)
	@$(CC) $(CPPFLAGS) $(CXXFLAGS) -c $(TEST_DIR)/test_simulation.cc $(INC_PARAMS)  -I$(RTFIND_INC_DIR)

test_simulation : wenoUpwinds.o simulation.o test_simulation.o simData.o fluxVectorSplitting.o srmhd.o boundaryConds.o initFunc.o RK2.o rkSplit.o serialEnv.o serialSaveData.o $(RTFIND_OBJS) weno.o gtest_main.a
	@$(CC)	$(CPPFLAGS) $(CXXFLAGS) -pthread $^ -o $@


# SRMHD Model
srmhd.o : $(MODULE_DIR)/Physics/srmhd.cc $(INC_BASE_DIR)/Physics/srmhd.h $(GTEST_HEADERS)
	@$(CC) $(CPPFLAGS) $(CXXFLAGS) -c $(MODULE_DIR)/Physics/srmhd.cc  $(INC_PARAMS) -I$(RTFIND_INC_DIR)

test_srmhd.o : $(TEST_DIR)/test_srmhd.cc \
                     $(INC_BASE_DIR)/Physics/srmhd.h $(INC_BASE_DIR)/Simulation/simulation.h $(INC_BASE_DIR)/Simulation/simData.h $(GTEST_HEADERS)
	@$(CC) $(CPPFLAGS) $(CXXFLAGS) -c $(TEST_DIR)/test_srmhd.cc $(INC_PARAMS)  -I$(RTFIND_INC_DIR)

test_srmhd : wenoUpwinds.o srmhd.o test_srmhd.o simData.o boundaryConds.o fluxVectorSplitting.o initFunc.o simulation.o weno.o serialEnv.o serialSaveData.o $(RTFIND_OBJS) gtest_main.a
	@$(CC)	$(CPPFLAGS) $(CXXFLAGS) -pthread $^ -o $@


# SRRMHD Model
srrmhd.o : $(MODULE_DIR)/Physics/srrmhd.cc $(INC_BASE_DIR)/Physics/srrmhd.h $(GTEST_HEADERS)
	@$(CC) $(CPPFLAGS) $(CXXFLAGS) -c $(MODULE_DIR)/Physics/srrmhd.cc  $(INC_PARAMS) -I$(RTFIND_INC_DIR)

test_srrmhd.o : $(TEST_DIR)/test_srrmhd.cc \
                     $(INC_BASE_DIR)/Physics/srrmhd.h $(INC_BASE_DIR)/Simulation/simulation.h $(INC_BASE_DIR)/Simulation/simData.h $(GTEST_HEADERS)
	@$(CC) $(CPPFLAGS) $(CXXFLAGS) -c $(TEST_DIR)/test_srrmhd.cc $(INC_PARAMS)  -I$(RTFIND_INC_DIR)

test_srrmhd : wenoUpwinds.o srrmhd.o test_srrmhd.o simData.o fluxVectorSplitting.o boundaryConds.o initFunc.o simulation.o weno.o serialEnv.o serialSaveData.o $(RTFIND_OBJS) gtest_main.a
	@$(CC)	$(CPPFLAGS) $(CXXFLAGS) -pthread $^ -o $@

# TwoFluidEMHD Model
twoFluidEMHD.o : $(MODULE_DIR)/Physics/twoFluidEMHD.cc $(INC_BASE_DIR)/Physics/twoFluidEMHD.h $(GTEST_HEADERS)
	@$(CC) $(CPPFLAGS) $(CXXFLAGS) -c $(MODULE_DIR)/Physics/twoFluidEMHD.cc  $(INC_PARAMS) -I$(RTFIND_INC_DIR)

test_twoFluidEMHD.o : $(TEST_DIR)/test_twoFluidEMHD.cc \
	                    $(INC_BASE_DIR)/Physics/twoFluidEMHD.h $(INC_BASE_DIR)/Simulation/simulation.h $(INC_BASE_DIR)/Simulation/simData.h $(GTEST_HEADERS)
	@$(CC) $(CPPFLAGS) $(CXXFLAGS) -c $(TEST_DIR)/test_twoFluidEMHD.cc $(INC_PARAMS)  -I$(RTFIND_INC_DIR)

test_twoFluidEMHD : wenoUpwinds.o twoFluidEMHD.o test_twoFluidEMHD.o fluxVectorSplitting.o boundaryConds.o simData.o RK2.o rkSplit.o initFunc.o simulation.o weno.o serialEnv.o serialSaveData.o $(RTFIND_OBJS) gtest_main.a
	@$(CC)	$(CPPFLAGS) $(CXXFLAGS) -pthread $^ -o $@


# InitialFunc
initFunc.o : $(MODULE_DIR)/InitialData/initFunc.cc $(INC_BASE_DIR)/InitialData/initFunc.h
		@$(CC) $(CPPFLAGS) $(CXXFLAGS) -c $(MODULE_DIR)/InitialData/initFunc.cc $(INC_PARAMS)

test_initFunc.o : $(TEST_DIR)/test_initFunc.cc $(INC_BASE_DIR)/InitialData/initFunc.h \
									$(INC_BASE_DIR)/Simulation/simulation.h $(INC_BASE_DIR)/Simulation/simData.h $(GTEST_HEADERS)
	@$(CC) $(CPPFLAGS) $(CXXFLAGS) -c $(TEST_DIR)/test_initFunc.cc $(INC_PARAMS)  -I$(RTFIND_INC_DIR)

test_initFunc : initFunc.o test_initFunc.o weno.o wenoUpwinds.o simData.o boundaryConds.o simulation.o twoFluidEMHD.o srmhd.o serialEnv.o serialSaveData.o $(RTFIND_OBJS) weno.o gtest_main.a
	@$(CC)	$(CPPFLAGS) $(CXXFLAGS) -pthread $^ -o $@


# Cminpack rootfinder
test_cminpack.o : $(TEST_DIR)/test_cminpack.cc $(GTEST_HEADERS)
	@$(CC) $(CPPFLAGS) $(CXXFLAGS) -c $(TEST_DIR)/test_cminpack.cc -I$(RTFIND_INC_DIR)

test_cminpack : test_cminpack.o $(RTFIND_OBJS) gtest_main.a
	@$(CC)	$(CPPFLAGS) $(CXXFLAGS) -pthread $^ -o $@


# Boundary Conditions
boundaryConds.o : $(MODULE_DIR)/BoundaryConditions/boundaryConds.cc $(INC_BASE_DIR)/BoundaryConditions/boundaryConds.h
		@$(CC) $(CPPFLAGS) $(CXXFLAGS) -c $(MODULE_DIR)/BoundaryConditions/boundaryConds.cc $(INC_PARAMS)


test_boundaryConds.o : $(TEST_DIR)/test_boundaryConds.cc $(INC_BASE_DIR)/BoundaryConditions/boundaryConds.h \
									$(GTEST_HEADERS)
	@$(CC) $(CPPFLAGS) $(CXXFLAGS) -c $(TEST_DIR)/test_boundaryConds.cc $(INC_PARAMS)  -I$(RTFIND_INC_DIR)

test_boundaryConds : test_boundaryConds.o weno.o wenoUpwinds.o boundaryConds.o simData.o srmhd.o simulation.o initFunc.o weno.o serialEnv.o serialSaveData.o $(RTFIND_OBJS) gtest_main.a
	@$(CC)	$(CPPFLAGS) $(CXXFLAGS) -pthread $^ -o $@

# Imex Schemes
SSP2.o : $(MODULE_DIR)/TimeIntegrators/SSP2.cc $(INC_BASE_DIR)/TimeIntegrators/SSP2.h $(INC_BASE_DIR)/TimeIntegrators/IMEX2Args.h $(INC_BASE_DIR)/TimeIntegrators/timeInt.h
	@$(CC)	$<	-c $(INC_PARAMS) -I$(RTFIND_INC_DIR)

IMEX2Args.o : $(MODULE_DIR)/TimeIntegrators/IMEX2Args.cc $(INC_BASE_DIR)/TimeIntegrators/IMEX2Args.h
	@$(CC)	$<	-c $(INC_PARAMS) -I$(RTFIND_INC_DIR)

SSP3.o : $(MODULE_DIR)/TimeIntegrators/SSP3.cc $(INC_BASE_DIR)/TimeIntegrators/SSP3.h $(INC_BASE_DIR)/TimeIntegrators/IMEX3Args.h $(INC_BASE_DIR)/TimeIntegrators/timeInt.h
	@$(CC)	$<	-c $(INC_PARAMS) -I$(RTFIND_INC_DIR)

IMEX3Args.o : $(MODULE_DIR)/TimeIntegrators/IMEX3Args.cc $(INC_BASE_DIR)/TimeIntegrators/IMEX3Args.h
	@$(CC)	$<	-c $(INC_PARAMS) -I$(RTFIND_INC_DIR)

test_imex.o : $(TEST_DIR)/test_imex.cc
	@$(CC) $(CPPFLAGS) $(CXXFLAGS) -c $(TEST_DIR)/test_imex.cc $(INC_PARAMS)  -I$(RTFIND_INC_DIR)

test_imex : wenoUpwinds.o IMEX2Args.o SSP2.o IMEX3Args.o SSP3.o simData.o srrmhd.o initFunc.o boundaryConds.o serialEnv.o serialSaveData.o simulation.o test_imex.o $(RTFIND_OBJS) fluxVectorSplitting.o weno.o gtest_main.a
	@$(CC)	$(CPPFLAGS) $(CXXFLAGS) -pthread $^ -o $@


# Resistive subgrid model
REGIME.o : $(MODULE_DIR)/Physics/REGIME.cc $(INC_BASE_DIR)/Physics/REGIME.h
	@$(CC) $(CPPFLAGS) $(CXXFLAGS) -c $(MODULE_DIR)/Physics/REGIME.cc $(INC_PARAMS)   -I$(RTFIND_INC_DIR)

test_REGIME.o : $(TEST_DIR)/test_REGIME.cc $(INC_BASE_DIR)/Physics/REGIME.h \
										$(GTEST_HEADERS)
		@$(CC) $(CPPFLAGS) $(CXXFLAGS) -c $(TEST_DIR)/test_REGIME.cc $(INC_PARAMS)  -I$(RTFIND_INC_DIR)

test_REGIME : wenoUpwinds.o srmhd.o test_REGIME.o REGIME.o initFunc.o  RK2.o rkSplit.o boundaryConds.o simData.o serialEnv.o serialSaveData.o fluxVectorSplitting.o simulation.o $(RTFIND_OBJS) weno.o gtest_main.a
	@$(CC)	$(CPPFLAGS) $(CXXFLAGS) -pthread $^ -o $@


# serial HDF5 tests

test_hdf5_rk2.o : $(TEST_DIR)/test_hdf5_rk2.cc $(INC_BASE_DIR)/RK2.h \
                        $(INC_BASE_DIR)/Physics/twoFluidEMHD.h $(INC_BASE_DIR)/Simulation/simulation.h $(INC_BASE_DIR)/Simulation/simData.h $(GTEST_HEADERS)
	$(HD5_CC) $(HDF5_FLAGS) $(MPI_FLAGS) $(CPPFLAGS) $(CXXFLAGS) -c $(TEST_DIR)/test_hdf5_rk2.cc $(INC_PARAMS)  -I$(RTFIND_INC_DIR)

test_hdf5_rk2 : wenoUpwinds.o test_hdf5_rk2.o srmhd.o srrmhd.o fluxVectorSplitting.o boundaryConds.o simData.o RK2.o initFunc.o simulation.o weno.o serialEnv.o serialSaveDataHDF5.o $(RTFIND_OBJS) gtest_main.a
	$(HD5_CC) $(HDF5_FLAGS) $(MPI_FLAGS) $(CPPFLAGS) $(CXXFLAGS) -pthread $^ -o $@



# parallel tests

# main func used for testing parallel tests. Serial tests can use the default gtest_main
main.o : $(TEST_DIR)/main.cpp $(INC_BASE_DIR)/Simulation/parallelEnv.h
	$(MPI_CC) $(MPI_FLAGS) $(CPPFLAGS) $(CXXFLAGS) -c $(TEST_DIR)/main.cpp $(INC_PARAMS)

parallelEnv.o : $(MODULE_DIR)/Sinulation/parallelEnv.cc $(INC_BASE_DIR)/Simulation/parallelEnv.h
	$(MPI_CC) $(MPI_FLAGS) $(CPPFLAGS) $(CXXFLAGS) -c $(MODULE_DIR)/Simulation/parallelEnv.cc $(INC_PARAMS)

parallelBoundaryConds.o : $(MODULE_DIR)/BoundaryConditions/parallelBoundaryConds.cc $(INC_BASE_DIR)/BoundaryConditions/parallelBoundaryConds.h
	@$(MPI_CC) $(MPI_FLAGS) $(CPPFLAGS) $(CXXFLAGS) -c $(MODULE_DIR)/BoundaryConditions/parallelBoundaryConds.cc $(INC_PARAMS)

test_parallel_rk2.o : $(TEST_DIR)/test_parallel_rk2.cc $(INC_BASE_DIR)/TimeIntegrators/RK2.h \
                        $(INC_BASE_DIR)/Physics/twoFluidEMHD.h $(INC_BASE_DIR)/Simulation/simulation.h $(INC_BASE_DIR)/Simulation/simData.h $(GTEST_HEADERS)
	$(MPI_CC) $(MPI_FLAGS) $(CPPFLAGS) $(CXXFLAGS) -c $(TEST_DIR)/test_parallel_rk2.cc $(INC_PARAMS)  -I$(RTFIND_INC_DIR)

test_parallel_rk2 : main.o wenoUpwinds.o test_parallel_rk2.o srmhd.o srrmhd.o fluxVectorSplitting.o parallelBoundaryConds.o simData.o RK2.o initFunc.o simulation.o weno.o parallelEnv.o parallelSaveData.o $(RTFIND_OBJS) gtest.a
	$(MPI_CC) $(MPI_FLAGS) $(CPPFLAGS) $(CXXFLAGS) -pthread $^ -o $@

test_parallel_rkSplit.o : $(TEST_DIR)/test_parallel_rkSplit.cc $(INC_BASE_DIR)/TimeIntegrators/rkSplit.h \
                        $(INC_BASE_DIR)/Physics/twoFluidEMHD.h $(INC_BASE_DIR)/Simulation/simulation.h $(INC_BASE_DIR)/Simulation/simData.h $(GTEST_HEADERS)
	$(MPI_CC) $(MPI_FLAGS) $(CPPFLAGS) $(CXXFLAGS) -c $(TEST_DIR)/test_parallel_rkSplit.cc $(INC_PARAMS)  -I$(RTFIND_INC_DIR)

test_parallel_rkSplit : main.o test_parallel_rkSplit.o weno.o wenoUpwinds.o srmhd.o srrmhd.o fluxVectorSplitting.o parallelBoundaryConds.o simData.o rkSplit.o RK2.o initFunc.o simulation.o weno.o parallelEnv.o parallelSaveData.o $(RTFIND_OBJS) gtest.a
	$(MPI_CC) $(MPI_FLAGS) $(CPPFLAGS) $(CXXFLAGS) -pthread $^ -o $@

# parallel HDF5 tests
test_hdf5_parallel_rk2.o : $(TEST_DIR)/test_hdf5_parallel_rk2.cc $(INC_BASE_DIR)/TimeIntegrators/RK2.h \
                        $(INC_BASE_DIR)/Physics/twoFluidEMHD.h $(INC_BASE_DIR)/Simulation/simulation.h $(INC_BASE_DIR)/Simulation/simData.h $(GTEST_HEADERS)
	$(HD5_CC) $(HDF5_FLAGS) $(MPI_FLAGS) $(CPPFLAGS) $(CXXFLAGS) -c $(TEST_DIR)/test_hdf5_parallel_rk2.cc $(INC_PARAMS)  -I$(RTFIND_INC_DIR)

test_hdf5_parallel_rk2 : main.o wenoUpwinds.o test_hdf5_parallel_rk2.o srmhd.o srrmhd.o fluxVectorSplitting.o parallelBoundaryConds.o simData.o RK2.o initFunc.o simulation.o weno.o parallelEnv.o parallelSaveDataHDF5.o $(RTFIND_OBJS) gtest.a
	$(HD5_CC) $(HDF5_FLAGS) $(MPI_FLAGS) $(CPPFLAGS) $(CXXFLAGS) -pthread $^ -o $@


