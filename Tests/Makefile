# The following makefile has been taken and adapted from the Google Test
# framework to meet the requirements for this project...

# A sample Makefile for building Google Test and using it in user
# tests.  Please tweak it to suit your environment and project.  You
# may want to move it to your project's root directory.
#
# SYNOPSIS:
#
#   make [all]  - makes everything.
#   make TARGET - makes the given target.
#   make clean  - removes all files generated by make.

# Please tweak the following variable definitions as needed by your
# project, except GTEST_HEADERS, which you can use in your own targets
# but shouldn't modify.

# Compiler
CC = nvcc

# Points to the root of Google Test, relative to where this file is.
# Remember to tweak this if you move this file.
GTEST_DIR = GoogleTest

# Where to find user code.
MODULE_DIR = ./../Project/Src
TEST_DIR = ./Src
INC_DIR = ./../Project/Include

# Flags passed to the preprocessor.
# Set Google Test's header directory as a system directory, such that
# the compiler doesn't generate warnings in Google Test headers.
CPPFLAGS = -isystem $(GTEST_DIR)/include

# Flags passed to the C++ compiler.
CXXFLAGS =

# All tests produced by this Makefile.  Remember to add new tests you
# created to the list.
TESTS = test_simulation test_srmhd test_initFunc

# All Google Test headers.  Usually you shouldn't change this
# definition.
GTEST_HEADERS = $(GTEST_DIR)/include/gtest/*.h \
                $(GTEST_DIR)/include/gtest/internal/*.h

# House-keeping build targets.

all : $(TESTS)

test : $(TESTS)
	# Run all tests
	@$(foreach exe, $(TESTS), ./$(exe);)

clean :
	rm -f $(TESTS) gtest.a gtest_main.a *.o

# Builds gtest.a and gtest_main.a.

# Usually you shouldn't tweak such internal variables, indicated by a
# trailing _.
GTEST_SRCS_ = $(GTEST_DIR)/src/*.cc $(GTEST_DIR)/src/*.h $(GTEST_HEADERS)

# For simplicity and to avoid depending on Google Test's
# implementation details, the dependencies specified below are
# conservative and not optimized.  This is fine as Google Test
# compiles fast and for ordinary users its source rarely changes.


gtest-all.o : $(GTEST_SRCS_)
	$(CXX) $(CPPFLAGS) -I$(GTEST_DIR) $(CXXFLAGS) -c \
            $(GTEST_DIR)/src/gtest-all.cc

gtest_main.o : $(GTEST_SRCS_)
	$(CXX) $(CPPFLAGS) -I$(GTEST_DIR) $(CXXFLAGS) -c \
            $(GTEST_DIR)/src/gtest_main.cc

gtest.a : gtest-all.o
	$(AR) $(ARFLAGS) $@ $^

gtest_main.a : gtest-all.o gtest_main.o
	$(AR) $(ARFLAGS) $@ $^



						#################################################
						# Bulid tests for each element of the programme #
						#################################################

# simData

simData.o : $(MODULE_DIR)/simData.cu $(INC_DIR)/simData.h $(INC_DIR)/cudaErrorCheck.h
	$(CC) $(CPPFLAGS) $(CXXFLAGS) -c $(MODULE_DIR)/simData.cu -I$(INC_DIR)

# Weno reconstruction

weno.o : $(MODULE_DIR)/weno.cu $(INC_DIR)/weno.h
	$(CC) $(CPPFLAGS) $(CXXFLAGS) -c $(MODULE_DIR)/weno.cu -I$(INC_DIR)
# simulation

simulation.o : $(MODULE_DIR)/simulation.cu $(INC_DIR)/simulation.h
	$(CC) $(CPPFLAGS) $(CXXFLAGS) -c $(MODULE_DIR)/simulation.cu -I$(INC_DIR)

test_simulation.o : $(TEST_DIR)/test_simulation.cu \
                     $(INC_DIR)/simulation.h $(GTEST_HEADERS)
	$(CC) $(CPPFLAGS) $(CXXFLAGS) -c $(TEST_DIR)/test_simulation.cu -I$(INC_DIR)

test_simulation : simulation.o test_simulation.o simData.o srmhd.o weno.o gtest_main.a
	$(CC)	$(CPPFLAGS) $(CXXFLAGS) -lpthread $^ -o $@


# Model

srmhd.o : $(MODULE_DIR)/srmhd.cu $(INC_DIR)/srmhd.h $(INC_DIR)/weno.h $(GTEST_HEADERS)
	$(CC) $(CPPFLAGS) $(CXXFLAGS) -c $(MODULE_DIR)/srmhd.cu  -I$(INC_DIR)

test_srmhd.o : $(TEST_DIR)/test_srmhd.cu \
                     $(INC_DIR)/srmhd.h $(INC_DIR)/simulation.h $(INC_DIR)/simData.h $(GTEST_HEADERS)
	$(CC) $(CPPFLAGS) $(CXXFLAGS) -c $(TEST_DIR)/test_srmhd.cu -I$(INC_DIR)

test_srmhd : srmhd.o test_srmhd.o simData.o initFunc.o simulation.o weno.o gtest_main.a
	$(CC)	$(CPPFLAGS) $(CXXFLAGS) -lpthread $^ -o $@


# InitialFunc

initFunc.o : $(MODULE_DIR)/initFunc.cu $(INC_DIR)/initFunc.h
		$(CC) $(CPPFLAGS) $(CXXFLAGS) -c $(MODULE_DIR)/initFunc.cu -I$(INC_DIR)

test_initFunc.o : $(TEST_DIR)/test_initFunc.cu $(INC_DIR)/initFunc.h \
									$(INC_DIR)/simulation.h $(INC_DIR)/simData.h $(GTEST_HEADERS)
	$(CC) $(CPPFLAGS) $(CXXFLAGS) -c $(TEST_DIR)/test_initFunc.cu -I$(INC_DIR)

test_initFunc : initFunc.o test_initFunc.o simData.o simulation.o srmhd.o weno.o gtest_main.a
	$(CC)	$(CPPFLAGS) $(CXXFLAGS) -lpthread $^ -o $@
